use super::{ Operator };
use super::statement::Statement;
use super::statement::StatementKind;
use super::expression::Expression;
use super::value::{ Value, FloatT, IntT };

string_inquotes -> String
    = s:$([^"]*) { s.to_string() }

int -> IntT
    = n:$("-"? [0-9]+) { n.parse::<IntT>().unwrap() }

float -> FloatT
    = n:$([0-9]+ "." [0-9]+) { n.parse::<FloatT>().unwrap() }

string -> String
    = "\"" s:string_inquotes "\"" { s }

#[pub]
value -> Value
    = f:float { Value::Float(f) }
    / i:int { Value::Int(i) }
    / s:string { Value::Str(s) }
    / "rick" { Value::Bool(true) }
    / "morty" { Value::Bool(false) }

identifier -> String
    = s:$([a-zA-Z_] [a-zA-Z0-9_]*) { s.to_string() }

#[pub]
operator -> Operator
    = "+" { Operator::Add }
    / "-" { Operator::Subtract }
    / "*" { Operator::Multiply }
    / "/" { Operator::Divide }
    / "==" { Operator::Equality }
    / "moresquanch" { Operator::GreaterThanEqual }
    / "lesssquanch" { Operator::LessThanEqual }
    / "more" { Operator::GreaterThan }
    / "less" { Operator::LessThan }
    / "schwift>" { Operator::ShiftRight }
    / "<schwift" { Operator::ShiftLeft }
    / "or" { Operator::Or }
    / "and" { Operator::And }

WS
    = [ \t]+

ws
    = [ \t]*

comma
    = ws "," ws

#[pub]
block -> Vec<Statement>
    = ":<" ws newline* l:line* ws ">:" { l }

line -> Statement
    = ws s:statement ws newline* { s }

#[pub]
file -> Vec<Statement>
    = l:line+ { l }

#[pub]
newline
    = "\n"

#[pub]
params -> Vec<String>
    = "(" is:identifier ** comma ")" { is }

#[pub]
statement_kind -> StatementKind
    = "squanch" WS i:identifier ws "[" ws e:expression ws "]" { StatementKind::ListDelete(i, e) }
    / i:identifier WS "on a cob" { StatementKind::ListNew(i) }
    / i:identifier WS "assimilate" WS e:expression { StatementKind::ListAppend(i, e) }
    / i:identifier ws "[" ws v:expression ws "]" WS "squanch" WS e:expression { StatementKind::ListAssign(i, v, e) }
    / n:identifier ws p:params ws b:block { StatementKind::Function(n, p, b) }
    / "squanch" WS i:identifier { StatementKind::Delete(i) }
    / i:identifier WS "squanch" WS e:expression { StatementKind::Assignment(i, e) }
    / "show me what you got!" WS e:expression { StatementKind::PrintNoNl(e) }
    / "show me what you got" WS e:expression { StatementKind::Print(e) }
    / "if" WS e:expression WS i_bod:block ws "else" WS e_bod:block { StatementKind::If(e, i_bod, Option::Some(e_bod)) }
    / "if" WS e:expression WS s:block { StatementKind::If(e, s, Option::None) }
    / "while" WS e:expression WS b:block { StatementKind::While(e, b) }
    / "portal gun" WS i:identifier { StatementKind::Input(i) }
    / "normal plan" ws try:block ws "plan for failure" ws catch:block { StatementKind::Catch(try, catch) }
    / i:identifier a:args { StatementKind::FunctionCall(i, a) }
    / "return" WS e:expression { StatementKind::Return(e) }
    / "microverse" WS lib:string WS funcs:block { StatementKind::DylibLoad(lib, funcs) }

#[pub]
statement -> Statement
    = start:#position s:statement_kind end:#position { Statement::new(s, start, end) }

#[pub]
expression -> Expression
    = i:identifier a:args { Expression::FunctionCall(i, a) }
    / "{" ws e:expression ws "}" { Expression::Eval(Box::new(e)) }
    / "(" ws e1:expression ws o:operator ws e2:expression ws ")" { Expression::OpExp(Box::new(e1), o, Box::new(e2)) }
    / "(" ws e:expression1 ws ")" { e }
    / expression1

#[pub]
args -> Vec<Expression>
    = "(" exprs:expression ** comma ")" { exprs }

expression1 -> Expression
    = i:identifier ws "[" ws e:expression ws "]" { Expression::ListIndex(i, Box::new(e)) }
    / v:value { Expression::Value(v) }
    / i:identifier WS "squanch" { Expression::ListLength(i) }
    / i:identifier { Expression::Variable(i) }
    / "!" ws e:expression { Expression::Not(Box::new(e)) }
