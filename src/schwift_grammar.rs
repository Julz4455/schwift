// Generated by rust-peg. Do not edit.
#![allow(non_snake_case, unused)]
use super::{Value, Variable, Operator, Statement, Expression};
use self::RuleResult::{Matched, Failed};
fn escape_default(s: &str) -> String {
    s.chars().flat_map(|c| c.escape_default()).collect()
}
fn char_range_at(s: &str, pos: usize) -> (char, usize) {
    let c = &s[pos..].chars().next().unwrap();
    let next_pos = pos + c.len_utf8();
    (*c, next_pos)
}
#[derive(Clone)]
enum RuleResult<T> { Matched(usize, T), Failed, }
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct ParseError {
    pub line: usize,
    pub column: usize,
    pub offset: usize,
    pub expected: ::std::collections::HashSet<&'static str>,
}
pub type ParseResult<T> = Result<T, ParseError>;
impl ::std::fmt::Display for ParseError {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter)
     -> ::std::result::Result<(), ::std::fmt::Error> {
        try!(write ! (
             fmt , "error at {}:{}: expected " , self . line , self . column
             ));
        if self.expected.len() == 0 {
            try!(write ! ( fmt , "EOF" ));
        } else if self.expected.len() == 1 {
            try!(write ! (
                 fmt , "`{}`" , escape_default (
                 self . expected . iter (  ) . next (  ) . unwrap (  ) ) ));
        } else {
            let mut iter = self.expected.iter();
            try!(write ! (
                 fmt , "one of `{}`" , escape_default (
                 iter . next (  ) . unwrap (  ) ) ));
            for elem in iter {
                try!(write ! ( fmt , ", `{}`" , escape_default ( elem ) ));
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for ParseError {
    fn description(&self) -> &str { "parse error" }
}
fn slice_eq(input: &str, state: &mut ParseState, pos: usize, m: &'static str)
 -> RuleResult<()> {
    #![inline]
    #![allow(dead_code)]
    let l = m.len();
    if input.len() >= pos + l &&
           &input.as_bytes()[pos..pos + l] == m.as_bytes() {
        Matched(pos + l, ())
    } else { state.mark_failure(pos, m) }
}
fn slice_eq_case_insensitive(input: &str, state: &mut ParseState, pos: usize,
                             m: &'static str) -> RuleResult<()> {
    #![inline]
    #![allow(dead_code)]
    let mut used = 0usize;
    let mut input_iter = input[pos..].chars().flat_map(|x| x.to_uppercase());
    for m_char_upper in m.chars().flat_map(|x| x.to_uppercase()) {
        used += m_char_upper.len_utf8();
        let input_char_result = input_iter.next();
        if input_char_result.is_none() ||
               input_char_result.unwrap() != m_char_upper {
            return state.mark_failure(pos, m);
        }
    }
    Matched(pos + used, ())
}
fn any_char(input: &str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    #![inline]
    #![allow(dead_code)]
    if input.len() > pos {
        let (_, next) = char_range_at(input, pos);
        Matched(next, ())
    } else { state.mark_failure(pos, "<character>") }
}
fn pos_to_line(input: &str, pos: usize) -> (usize, usize) {
    let mut remaining = pos;
    let mut lineno: usize = 1;
    for line in input.lines() {
        let line_length = line.len() + 1;
        if remaining < line_length { return (lineno, remaining + 1); }
        remaining -= line_length;
        lineno += 1;
    }
    return (lineno, remaining + 1);
}
struct ParseState<'input> {
    max_err_pos: usize,
    expected: ::std::collections::HashSet<&'static str>,
    _phantom: ::std::marker::PhantomData<&'input ()>,
}
impl <'input> ParseState<'input> {
    fn new() -> ParseState<'input> {
        ParseState{max_err_pos: 0,
                   expected: ::std::collections::HashSet::new(),
                   _phantom: ::std::marker::PhantomData,}
    }
    fn mark_failure(&mut self, pos: usize, expected: &'static str)
     -> RuleResult<()> {
        if pos > self.max_err_pos {
            self.max_err_pos = pos;
            self.expected.clear();
        }
        if pos == self.max_err_pos { self.expected.insert(expected); }
        Failed
    }
}
fn parse_string<'input>(input: &'input str, state: &mut ParseState<'input>,
                        pos: usize) -> RuleResult<Value> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "\"");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            parse_string_inquotes(input, state, pos);
                        match seq_res {
                            Matched(pos, s) => {
                                {
                                    let seq_res =
                                        slice_eq(input, state, pos, "\"");
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        { Value::Str(s) })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_string_inquotes<'input>(input: &'input str,
                                 state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let mut repeat_pos = pos;
                    loop  {
                        let pos = repeat_pos;
                        let step_res =
                            if input.len() > pos {
                                let (ch, next) = char_range_at(input, pos);
                                match ch {
                                    '\"' => state.mark_failure(pos, "[^\"]"),
                                    _ => Matched(next, ()),
                                }
                            } else { state.mark_failure(pos, "[^\"]") };
                        match step_res {
                            Matched(newpos, value) => { repeat_pos = newpos; }
                            Failed => { break ; }
                        }
                    }
                    Matched(repeat_pos, ())
                };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { match_str.to_string() })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_int<'input>(input: &'input str, state: &mut ParseState<'input>,
                     pos: usize) -> RuleResult<i32> {
    {
        let start_pos = pos;
        {
            let seq_res =
                match slice_eq(input, state, pos, "-") {
                    Matched(newpos, value) => { Matched(newpos, Some(value)) }
                    Failed => { Matched(pos, None) }
                };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        if input.len() > pos {
                                            let (ch, next) =
                                                char_range_at(input, pos);
                                            match ch {
                                                '0' ...'9' =>
                                                Matched(next, ()),
                                                _ =>
                                                state.mark_failure(pos,
                                                                   "[0-9]"),
                                            }
                                        } else {
                                            state.mark_failure(pos, "[0-9]")
                                        };
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                if repeat_value.len() >= 1usize {
                                    Matched(repeat_pos, ())
                                } else { Failed }
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str = &input[start_pos..pos];
                                    Matched(pos,
                                            {
                                                match_str.parse::<i32>().unwrap()
                                            })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_float<'input>(input: &'input str, state: &mut ParseState<'input>,
                       pos: usize) -> RuleResult<f32> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let mut repeat_pos = pos;
                    let mut repeat_value = vec!();
                    loop  {
                        let pos = repeat_pos;
                        let step_res =
                            if input.len() > pos {
                                let (ch, next) = char_range_at(input, pos);
                                match ch {
                                    '0' ...'9' => Matched(next, ()),
                                    _ => state.mark_failure(pos, "[0-9]"),
                                }
                            } else { state.mark_failure(pos, "[0-9]") };
                        match step_res {
                            Matched(newpos, value) => {
                                repeat_pos = newpos;
                                repeat_value.push(value);
                            }
                            Failed => { break ; }
                        }
                    }
                    if repeat_value.len() >= 1usize {
                        Matched(repeat_pos, ())
                    } else { Failed }
                };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = slice_eq(input, state, pos, ".");
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        {
                                            let mut repeat_pos = pos;
                                            let mut repeat_value = vec!();
                                            loop  {
                                                let pos = repeat_pos;
                                                let step_res =
                                                    if input.len() > pos {
                                                        let (ch, next) =
                                                            char_range_at(input,
                                                                          pos);
                                                        match ch {
                                                            '0' ...'9' =>
                                                            Matched(next, ()),
                                                            _ =>
                                                            state.mark_failure(pos,
                                                                               "[0-9]"),
                                                        }
                                                    } else {
                                                        state.mark_failure(pos,
                                                                           "[0-9]")
                                                    };
                                                match step_res {
                                                    Matched(newpos, value) =>
                                                    {
                                                        repeat_pos = newpos;
                                                        repeat_value.push(value);
                                                    }
                                                    Failed => { break ; }
                                                }
                                            }
                                            if repeat_value.len() >= 1usize {
                                                Matched(repeat_pos, ())
                                            } else { Failed }
                                        };
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        {
                                                            match_str.parse::<f32>().unwrap()
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_v_int<'input>(input: &'input str, state: &mut ParseState<'input>,
                       pos: usize) -> RuleResult<Value> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_int(input, state, pos);
            match seq_res {
                Matched(pos, i) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { Value::Int(i) })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_v_float<'input>(input: &'input str, state: &mut ParseState<'input>,
                         pos: usize) -> RuleResult<Value> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_float(input, state, pos);
            match seq_res {
                Matched(pos, f) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { Value::Float(f) })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_truth<'input>(input: &'input str, state: &mut ParseState<'input>,
                       pos: usize) -> RuleResult<Value> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "rick");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { Value::Bool(true) })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_falsehood<'input>(input: &'input str, state: &mut ParseState<'input>,
                           pos: usize) -> RuleResult<Value> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "morty");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { Value::Bool(false) })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_boolean<'input>(input: &'input str, state: &mut ParseState<'input>,
                         pos: usize) -> RuleResult<Value> {
    {
        let choice_res = parse_truth(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => parse_falsehood(input, state, pos),
        }
    }
}
fn parse_list_instantiation<'input>(input: &'input str,
                                    state: &mut ParseState<'input>,
                                    pos: usize) -> RuleResult<Statement> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_identifier(input, state, pos);
            match seq_res {
                Matched(pos, i) => {
                    {
                        let seq_res = parse_whitespace(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        slice_eq(input, state, pos,
                                                 "on a cob");
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        {
                                                            Statement::ListNew(i)
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_list_append<'input>(input: &'input str,
                             state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Statement> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_identifier(input, state, pos);
            match seq_res {
                Matched(pos, i) => {
                    {
                        let seq_res = parse_whitespace(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        slice_eq(input, state, pos,
                                                 "assimilate");
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    parse_whitespace(input,
                                                                     state,
                                                                     pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_expression(input,
                                                                                 state,
                                                                                 pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        e) =>
                                                                {
                                                                    {
                                                                        let match_str =
                                                                            &input[start_pos..pos];
                                                                        Matched(pos,
                                                                                {
                                                                                    Statement::ListAppend(i,
                                                                                                          e)
                                                                                })
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_list_statements<'input>(input: &'input str,
                                 state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Statement> {
    {
        let choice_res = parse_list_instantiation(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => parse_list_append(input, state, pos),
        }
    }
}
fn parse_list_index<'input>(input: &'input str,
                            state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Expression> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_identifier(input, state, pos);
            match seq_res {
                Matched(pos, i) => {
                    {
                        let seq_res =
                            parse_optional_whitespace(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        slice_eq(input, state, pos, "[");
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    parse_optional_whitespace(input,
                                                                              state,
                                                                              pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_int(input,
                                                                          state,
                                                                          pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        v) =>
                                                                {
                                                                    {
                                                                        let seq_res =
                                                                            parse_optional_whitespace(input,
                                                                                                      state,
                                                                                                      pos);
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        slice_eq(input,
                                                                                                 state,
                                                                                                 pos,
                                                                                                 "]");
                                                                                    match seq_res
                                                                                        {
                                                                                        Matched(pos,
                                                                                                _)
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let match_str =
                                                                                                    &input[start_pos..pos];
                                                                                                Matched(pos,
                                                                                                        {
                                                                                                            Expression::ListIndex(i,
                                                                                                                                  v)
                                                                                                        })
                                                                                            }
                                                                                        }
                                                                                        Failed
                                                                                        =>
                                                                                        Failed,
                                                                                    }
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_value<'input>(input: &'input str, state: &mut ParseState<'input>,
                       pos: usize) -> RuleResult<Value> {
    {
        let choice_res = parse_v_float(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_v_int(input, state, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res = parse_string(input, state, pos);
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => parse_boolean(input, state, pos),
                        }
                    }
                }
            }
        }
    }
}
fn parse_identifier<'input>(input: &'input str,
                            state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res =
                if input.len() > pos {
                    let (ch, next) = char_range_at(input, pos);
                    match ch {
                        'a' ...'z' | 'A' ...'Z' => Matched(next, ()),
                        _ => state.mark_failure(pos, "[a-zA-Z]"),
                    }
                } else { state.mark_failure(pos, "[a-zA-Z]") };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        if input.len() > pos {
                                            let (ch, next) =
                                                char_range_at(input, pos);
                                            match ch {
                                                'a' ...'z' | 'A' ...'Z' | '0'
                                                ...'9' | '_' =>
                                                Matched(next, ()),
                                                _ =>
                                                state.mark_failure(pos,
                                                                   "[a-zA-Z0-9_]"),
                                            }
                                        } else {
                                            state.mark_failure(pos,
                                                               "[a-zA-Z0-9_]")
                                        };
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, ())
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str = &input[start_pos..pos];
                                    Matched(pos, { match_str.to_string() })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_plus<'input>(input: &'input str, state: &mut ParseState<'input>,
                      pos: usize) -> RuleResult<Operator> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "+");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { Operator::Add })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_minus<'input>(input: &'input str, state: &mut ParseState<'input>,
                       pos: usize) -> RuleResult<Operator> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "-");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { Operator::Subtract })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_times<'input>(input: &'input str, state: &mut ParseState<'input>,
                       pos: usize) -> RuleResult<Operator> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "*");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { Operator::Multiply })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_divide<'input>(input: &'input str, state: &mut ParseState<'input>,
                        pos: usize) -> RuleResult<Operator> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "/");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { Operator::Divide })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_equality<'input>(input: &'input str, state: &mut ParseState<'input>,
                          pos: usize) -> RuleResult<Operator> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "==");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { Operator::Equality })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_operator<'input>(input: &'input str, state: &mut ParseState<'input>,
                          pos: usize) -> RuleResult<Operator> {
    {
        let choice_res = parse_plus(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_minus(input, state, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => {
                        let choice_res = parse_times(input, state, pos);
                        match choice_res {
                            Matched(pos, value) => Matched(pos, value),
                            Failed => {
                                let choice_res =
                                    parse_divide(input, state, pos);
                                match choice_res {
                                    Matched(pos, value) =>
                                    Matched(pos, value),
                                    Failed =>
                                    parse_equality(input, state, pos),
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
fn parse_whitespace<'input>(input: &'input str,
                            state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<()> {
    {
        let mut repeat_pos = pos;
        let mut repeat_value = vec!();
        loop  {
            let pos = repeat_pos;
            let step_res =
                if input.len() > pos {
                    let (ch, next) = char_range_at(input, pos);
                    match ch {
                        ' ' | '\t' => Matched(next, ()),
                        _ => state.mark_failure(pos, "[ \t]"),
                    }
                } else { state.mark_failure(pos, "[ \t]") };
            match step_res {
                Matched(newpos, value) => {
                    repeat_pos = newpos;
                    repeat_value.push(value);
                }
                Failed => { break ; }
            }
        }
        if repeat_value.len() >= 1usize {
            Matched(repeat_pos, ())
        } else { Failed }
    }
}
fn parse_assignment<'input>(input: &'input str,
                            state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Statement> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_identifier(input, state, pos);
            match seq_res {
                Matched(pos, i) => {
                    {
                        let seq_res = parse_whitespace(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        slice_eq(input, state, pos,
                                                 "squanch");
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    parse_whitespace(input,
                                                                     state,
                                                                     pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_expression(input,
                                                                                 state,
                                                                                 pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        e) =>
                                                                {
                                                                    {
                                                                        let match_str =
                                                                            &input[start_pos..pos];
                                                                        Matched(pos,
                                                                                {
                                                                                    Statement::Assignment(i,
                                                                                                          e)
                                                                                })
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_deletion<'input>(input: &'input str, state: &mut ParseState<'input>,
                          pos: usize) -> RuleResult<Statement> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "squanch");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = parse_whitespace(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        parse_identifier(input, state, pos);
                                    match seq_res {
                                        Matched(pos, i) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        {
                                                            Statement::Delete(i)
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_line<'input>(input: &'input str, state: &mut ParseState<'input>,
                      pos: usize) -> RuleResult<Statement> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_optional_whitespace(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = parse_statement(input, state, pos);
                        match seq_res {
                            Matched(pos, s) => {
                                {
                                    let seq_res =
                                        parse_optional_whitespace(input,
                                                                  state, pos);
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    {
                                                        let mut repeat_pos =
                                                            pos;
                                                        loop  {
                                                            let pos =
                                                                repeat_pos;
                                                            let step_res =
                                                                parse_newline(input,
                                                                              state,
                                                                              pos);
                                                            match step_res {
                                                                Matched(newpos,
                                                                        value)
                                                                => {
                                                                    repeat_pos
                                                                        =
                                                                        newpos;
                                                                }
                                                                Failed => {
                                                                    break ;
                                                                }
                                                            }
                                                        }
                                                        Matched(repeat_pos,
                                                                ())
                                                    };
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let match_str =
                                                                &input[start_pos..pos];
                                                            Matched(pos,
                                                                    { s })
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_file<'input>(input: &'input str, state: &mut ParseState<'input>,
                      pos: usize) -> RuleResult<Vec<Statement>> {
    {
        let mut repeat_pos = pos;
        let mut repeat_value = vec!();
        loop  {
            let pos = repeat_pos;
            let step_res = parse_line(input, state, pos);
            match step_res {
                Matched(newpos, value) => {
                    repeat_pos = newpos;
                    repeat_value.push(value);
                }
                Failed => { break ; }
            }
        }
        if repeat_value.len() >= 1usize {
            Matched(repeat_pos, repeat_value)
        } else { Failed }
    }
}
fn parse_optional_whitespace<'input>(input: &'input str,
                                     state: &mut ParseState<'input>,
                                     pos: usize) -> RuleResult<()> {
    {
        let mut repeat_pos = pos;
        loop  {
            let pos = repeat_pos;
            let step_res =
                if input.len() > pos {
                    let (ch, next) = char_range_at(input, pos);
                    match ch {
                        ' ' | '\t' => Matched(next, ()),
                        _ => state.mark_failure(pos, "[ \t]"),
                    }
                } else { state.mark_failure(pos, "[ \t]") };
            match step_res {
                Matched(newpos, value) => { repeat_pos = newpos; }
                Failed => { break ; }
            }
        }
        Matched(repeat_pos, ())
    }
}
fn parse_newline<'input>(input: &'input str, state: &mut ParseState<'input>,
                         pos: usize) -> RuleResult<()> {
    slice_eq(input, state, pos, "\n")
}
fn parse_statement<'input>(input: &'input str, state: &mut ParseState<'input>,
                           pos: usize) -> RuleResult<Statement> {
    {
        let choice_res = parse_deletion(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_assignment(input, state, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => parse_printing(input, state, pos),
                }
            }
        }
    }
}
fn parse_list_assign<'input>(input: &'input str,
                             state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Statement> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_identifier(input, state, pos);
            match seq_res {
                Matched(pos, i) => {
                    {
                        let seq_res =
                            parse_optional_whitespace(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        slice_eq(input, state, pos, "[");
                                    match seq_res {
                                        Matched(pos, _) => {
                                            {
                                                let seq_res =
                                                    parse_optional_whitespace(input,
                                                                              state,
                                                                              pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_int(input,
                                                                          state,
                                                                          pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        v) =>
                                                                {
                                                                    {
                                                                        let seq_res =
                                                                            parse_optional_whitespace(input,
                                                                                                      state,
                                                                                                      pos);
                                                                        match seq_res
                                                                            {
                                                                            Matched(pos,
                                                                                    _)
                                                                            =>
                                                                            {
                                                                                {
                                                                                    let seq_res =
                                                                                        slice_eq(input,
                                                                                                 state,
                                                                                                 pos,
                                                                                                 "]");
                                                                                    match seq_res
                                                                                        {
                                                                                        Matched(pos,
                                                                                                _)
                                                                                        =>
                                                                                        {
                                                                                            {
                                                                                                let seq_res =
                                                                                                    parse_optional_whitespace(input,
                                                                                                                              state,
                                                                                                                              pos);
                                                                                                match seq_res
                                                                                                    {
                                                                                                    Matched(pos,
                                                                                                            _)
                                                                                                    =>
                                                                                                    {
                                                                                                        {
                                                                                                            let seq_res =
                                                                                                                slice_eq(input,
                                                                                                                         state,
                                                                                                                         pos,
                                                                                                                         "squanch");
                                                                                                            match seq_res
                                                                                                                {
                                                                                                                Matched(pos,
                                                                                                                        _)
                                                                                                                =>
                                                                                                                {
                                                                                                                    {
                                                                                                                        let seq_res =
                                                                                                                            parse_value(input,
                                                                                                                                        state,
                                                                                                                                        pos);
                                                                                                                        match seq_res
                                                                                                                            {
                                                                                                                            Matched(pos,
                                                                                                                                    a)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    let match_str =
                                                                                                                                        &input[start_pos..pos];
                                                                                                                                    Matched(pos,
                                                                                                                                            {
                                                                                                                                                Statement::ListAssign(i,
                                                                                                                                                                      v,
                                                                                                                                                                      a)
                                                                                                                                            })
                                                                                                                                }
                                                                                                                            }
                                                                                                                            Failed
                                                                                                                            =>
                                                                                                                            Failed,
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                Failed
                                                                                                                =>
                                                                                                                Failed,
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    Failed
                                                                                                    =>
                                                                                                    Failed,
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        Failed
                                                                                        =>
                                                                                        Failed,
                                                                                    }
                                                                                }
                                                                            }
                                                                            Failed
                                                                            =>
                                                                            Failed,
                                                                        }
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_printing<'input>(input: &'input str, state: &mut ParseState<'input>,
                          pos: usize) -> RuleResult<Statement> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "show me what you got");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = parse_whitespace(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        parse_expression(input, state, pos);
                                    match seq_res {
                                        Matched(pos, e) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        {
                                                            Statement::Print(e)
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_expression<'input>(input: &'input str,
                            state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Expression> {
    {
        let choice_res = parse_operator_expression(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_variable_expression(input, state, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => parse_value_expression(input, state, pos),
                }
            }
        }
    }
}
fn parse_expression1<'input>(input: &'input str,
                             state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Expression> {
    {
        let choice_res = parse_variable_expression(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => parse_value_expression(input, state, pos),
        }
    }
}
fn parse_operator_expression<'input>(input: &'input str,
                                     state: &mut ParseState<'input>,
                                     pos: usize) -> RuleResult<Expression> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_expression1(input, state, pos);
            match seq_res {
                Matched(pos, e1) => {
                    {
                        let seq_res =
                            parse_optional_whitespace(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        parse_operator(input, state, pos);
                                    match seq_res {
                                        Matched(pos, o) => {
                                            {
                                                let seq_res =
                                                    parse_optional_whitespace(input,
                                                                              state,
                                                                              pos);
                                                match seq_res {
                                                    Matched(pos, _) => {
                                                        {
                                                            let seq_res =
                                                                parse_expression(input,
                                                                                 state,
                                                                                 pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        e2) =>
                                                                {
                                                                    {
                                                                        let match_str =
                                                                            &input[start_pos..pos];
                                                                        Matched(pos,
                                                                                {
                                                                                    Expression::OperatorExpression(Box::new(e1),
                                                                                                                   o,
                                                                                                                   Box::new(e2))
                                                                                })
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_value_expression<'input>(input: &'input str,
                                  state: &mut ParseState<'input>, pos: usize)
 -> RuleResult<Expression> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_value(input, state, pos);
            match seq_res {
                Matched(pos, v) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { Expression::Value(v) })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_variable_expression<'input>(input: &'input str,
                                     state: &mut ParseState<'input>,
                                     pos: usize) -> RuleResult<Expression> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_identifier(input, state, pos);
            match seq_res {
                Matched(pos, i) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { Expression::Variable(i) })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
pub fn file<'input>(input: &'input str) -> ParseResult<Vec<Statement>> {
    let mut state = ParseState::new();
    match parse_file(input, &mut state, 0) {
        Matched(pos, value) => { if pos == input.len() { return Ok(value) } }
        _ => { }
    }
    let (line, col) = pos_to_line(input, state.max_err_pos);
    Err(ParseError{line: line,
                   column: col,
                   offset: state.max_err_pos,
                   expected: state.expected,})
}
pub fn expression<'input>(input: &'input str) -> ParseResult<Expression> {
    let mut state = ParseState::new();
    match parse_expression(input, &mut state, 0) {
        Matched(pos, value) => { if pos == input.len() { return Ok(value) } }
        _ => { }
    }
    let (line, col) = pos_to_line(input, state.max_err_pos);
    Err(ParseError{line: line,
                   column: col,
                   offset: state.max_err_pos,
                   expected: state.expected,})
}
