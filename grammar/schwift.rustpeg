use super::{ Value, Variable, Operator, Statement, Expression };

string -> Value
    = "\"" s:string_inquotes "\"" { Value::Str(s) }

string_inquotes -> String
    = [^"]* { match_str.to_string() }

int -> i32
    = "-"? [0-9]+ { match_str.parse::<i32>().unwrap() }

float -> f32
    = [0-9]+ "." [0-9]+ { match_str.parse::<f32>().unwrap() }

v_int -> Value
    = i:int { Value::Int(i) }

v_float -> Value
    = f:float { Value::Float(f) }

truth -> Value
    = "rick" { Value::Bool(true) }

falsehood -> Value
    = "morty" { Value::Bool(false) }

boolean -> Value
    = truth / falsehood

list_instantiation -> Statement
    = i:identifier whitespace "on a cob" { Statement::ListNew(i) }

list_append -> Statement
    = i:identifier whitespace "assimilate" whitespace e:expression { Statement::ListAppend(i, e) }

list_statements -> Statement
    = list_instantiation / list_append / list_assign

list_index -> Expression
    = i:identifier optional_whitespace "[" optional_whitespace e:expression optional_whitespace "]" { Expression::ListIndex(i, Box::new(e)) }

value -> Value
    = v_float / v_int / string / boolean

identifier -> String
    = [a-zA-Z] [a-zA-Z0-9_]* { match_str.to_string() }

plus -> Operator
    = "+" { Operator::Add }

minus -> Operator
    = "-" { Operator::Subtract }

times -> Operator
    = "*" { Operator::Multiply }

divide -> Operator
    = "/" { Operator::Divide }

equality -> Operator
    = "==" { Operator::Equality }

operator -> Operator
    = plus / minus / times / divide / equality

whitespace
    = [ \t]+

assignment -> Statement
    = i:identifier whitespace "squanch" whitespace e:expression { Statement::Assignment(i, e) }

deletion -> Statement
    = "squanch" whitespace i:identifier { Statement::Delete(i) }

line -> Statement
    = optional_whitespace s:statement optional_whitespace newline* { s }

#[pub]
file -> Vec<Statement>
    = line+

optional_whitespace
    = [ \t]*

newline
    = "\n"

statement -> Statement
    = deletion / assignment / printing / list_statements

list_assign -> Statement
    = i:identifier optional_whitespace "[" optional_whitespace v:int optional_whitespace"]" optional_whitespace "squanch" e:expression { Statement::ListAssign(i, v, e) }

printing -> Statement
    = "show me what you got" whitespace e:expression { Statement::Print(e) }

#[pub]
expression -> Expression
    = list_index / operator_expression / variable_expression / value_expression

expression1 -> Expression
    = variable_expression / value_expression

operator_expression -> Expression
    = e1:expression1 optional_whitespace o:operator optional_whitespace e2:expression { Expression::OperatorExpression(Box::new(e1), o, Box::new(e2)) }

value_expression -> Expression
    = v:value { Expression::Value(v) }

variable_expression -> Expression
    = i:identifier { Expression::Variable(i) }
